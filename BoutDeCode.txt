
L7 expérimental test évolution de code
https://regex101.com/r/xFyKJB/1

/\/\||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
SAVE SCRIPT TOPGONE
----------------------------------------------------------------------------

exit;

AC::debutTempTest();
MO::doctype();
MO::tete();

MO::meta(['charset' => 'UTF-8']);
if (MO::session('utilisateur', 'inscript'))
    MO::autoload('page_produits');

MO::titre('{{TITRE}}');
MO::css(THEMEUSE, true);
MO::js(src: 'https://code.jquery.com/jquery-3.6.0.min.js');

MO::corp();
MO::debutDiv(id: 'page');

if (MO::session('utilisateur', 'inscript')) {
    // Vide si utilisateur inscrit
} else {

    MO::debutHeader();
    echo '{{TITRE}}';

    MO::debutDiv(id: 'colone_menu');


    MO::boutton_ajustable(
        texte: '',
        image: 'svg/fi-rr-chart-tree.svg',
        class: 'logo_boutton_ajustable',
        theme: THEMEUSE,
        lien: '',
        injecter: ['tag' => 'img', 'injecter' => 'test_dinjection']
    );
    MO::boutton_ajustable(
        texte: 'Accueil',
        image: 'svg/fi-rr-home.svg',
        theme: THEMEUSE,
        lien: 'page_accueil'
    );
    MO::boutton_ajustable(
        texte: 'Explore',
        image: 'svg/fi-rr-comment-alt.svg',
        theme: THEMEUSE,
        lien: 'page_explore'
    );
    MO::boutton_ajustable(
        texte: 'Messages',
        image: 'svg/fi-rr-envelope.svg',
        theme: THEMEUSE,
        lien: 'page_messages'
    );
    MO::boutton_ajustable(
        texte: 'Notification',
        image: 'svg/fi-rr-bell.svg',
        theme: THEMEUSE,
        lien: 'page_notification'
    );
    MO::boutton_ajustable(
        texte: 'Options',
        image: 'svg/fi-rr-settings.svg',
        class: 'boutton_ajustable_config',
        theme: THEMEUSE,
        lien: 'page_options'
    );

    MO::finDiv();
    MO::finHeader();

    MO::debutMain();
    MO::debutDiv(id: 'colone_article');
    MO::debutDiv(id: 'bar_principal');
    MO::tag('h2', 'Accueil');
    MO::finDiv();

    MO::debutDiv(id: 'lot');
    MO::formulaire(
        nom: 'inscription',
        tableau_de_type: [
            'Label text1' => ['name' => 'nom', 'type' => 'texte', 'value' => 'v1', 'placeholder' => '', 'class' => 'put'],
            'Label text2' => ['name' => 'prenom', 'type' => 'password', 'value' => 'v2', 'placeholder' => '', 'class' => 'lut'],
        ],
        boutton_valider: 'ok',
        page_dappel: 'test',
        injection: [
            'nom' => [
                MO::tag('h3', 'INSCRIPTION', retour: true)
                , 'avant']
        ]
    );

    MO::finDiv();
    MO::debutDiv(id: 'pied_article');
    MO::tag('img', '', ['src' => 'ressources/themes/images/animated-loading-icon.gif']);
    MO::finDiv();
    MO::finDiv();
    MO::debutDiv(id: 'colone_infos');
    MO::debutDiv(id: 'bar_secondaire');

    // <!-- - COLONE INFO - -->

    MO::boutton_ajustable(
        MO::bare_de_texte(id: 'bar_de_recherche', retour: true)[0],
        image: '/svg/fi-rr-search.svg',
        id: 'zone_de_recherche',
        theme: THEMEUSE,
        no_tag_a: true
    );

    MO::finDiv();
    MO::debutDiv(id: 'lot_informations');

    MO::div(donee: 'Block de TEST', class: 'capsule');
    MO::div(donee: 'Block de TEST', class: 'capsule');
    MO::div(donee: 'Block de TEST', class: 'capsule');
    MO::div(donee: 'Block de TEST', class: 'capsule');
    MO::div(donee: 'Block de TEST', class: 'capsule');
    MO::div(donee: 'Block de TEST', class: 'capsule');

    $pilote = new pilote();
    $Modules_pages = $pilote->Charger_le_module(
        module_a_charger: 'Modules_pages',
        modules_primaire: [CMD::PAGEENCACHE, CMD::MODULES_BDD]
    );

    MO::finDiv();
    MO::finDiv();
    MO::Mainfin();
}

MO::debutDiv('END');
MO::ScriptTheme('grey', true);
AC::finTempTest();
MO::fin();


/\/\|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
-----------------------------------------------------------------------------
/\/\|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
SAVE PHPML MODULE TEST CODE EXPERIMENTAL
----------------------------------------------------------------------------
<?php

namespace Eukaruon\modules;

class Modules_phpml
{
    /*
     * votre module  pour phpml devra nommer les fonctions par le nom de la classe
     * par exemple j'utilise <phpml:etoile.forme
     * dans ma class "etoile" je vais devoir avec une fonction forme nommé
     * ainsi : public function etoile_forme(){} c'est pour évité de créé des fonctions
     * qui existe déjà en php
     * votre module doit ressemblé à celui-ci pour qu'il puissent être exploité
     * soit contenu un constructeur avec $element1 = null,$element2 = null
     * et la fonction utilise_methode($methode, $exploit = null, $inserts = null, $contenu = null)
     * vos méthodes seront en private et devrons travailler avec le tableau $donnee
     * la function utilise_methode est là comme pré-function qui permettra la sécurité
     * et la bonne fiabilité des données avant exploitation
     */
    const CONTENU_IF = '/(*UCP)<(?|(done)|(elseif)\(((?:(?(R)\w++|[^()]*+)|(?R))*)\)|(else))>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/(?:done|elseif|else)>|<\w*\s*[[:word:][:cntrl:][:blank:]+*-="\'\/\\\\.,;:[\](){}\x20?#&%|@]*\s*>/';
    const ANALYSE_IF = '/(\w*)([=><%!+*^&|\/~]*)(\w*)/';

    private string|null $_element1;
    private string|null $_element2;
    private string|null $_ac_type;

    private array $_gen_var_phpml;

    public function __construct($ac_type = null, $element1 = null, $element2 = null, $gen_var_phpml = array())
    {
        var_dump($ac_type);
        var_dump($element1);
        var_dump($element2);
        $this->_ac_type = $ac_type;
        $this->_element1 = $element1;
        $this->_element2 = $element2;
        $this->_gen_var_phpml = $gen_var_phpml;

        /*
         * ici element1 et element2
         * sont là pour vous permettre une grande flexibilité en phpml
         * et un maxium de possibilité comme des drapeaux
         */
    }


    public function utilise_methode($methode, $exploit = null, $inserts = null, $contenu = null)
    {
        // ici chaque méthode travaillera avec un tableau
        // ce qui permet par la suite selon votre code
        // et les interpretations de travailler en amont sur
        // le contenu de ce tableau et mettre en relation
        // $element1 et $element2
        $donnee = [
            'exploit' => $exploit,
            'inserts' => $inserts,
            'contenu' => $contenu
            // vous pouvez ajouter du contenu exploité dans les functions
        ];
        return $this->$methode($donnee);
    }

    private function phpml_head($donnee)
    {
        echo '---->';
        // convertion json avec '' en ""
        $donnee['exploit'] = str_ireplace(['"', '\''], ['\"', '"'], $donnee['exploit']);
        var_dump($donnee['exploit']);
        $json_to_array = json_decode($donnee['exploit'], true);
        var_dump($json_to_array);
        echo '<----';

        $doctype = $json_to_array['doctype'] ?? '';
        $lang = $json_to_array['lang'] ?? '';
        $title = $json_to_array['title'] ?? '';
        $base = '<base ' . ($json_to_array['base'] ?? '') . '>';

        $head = '';
        var_dump($json_to_array);
        if (is_array($json_to_array['head'])) {
            foreach ($json_to_array['head'] as $cle => $valeur) {
                if (is_array($valeur)) {
                    foreach ($valeur as $valeur2) {
                        if (is_array($valeur2)) {
                            $valeur2x = '';
                            foreach ($valeur2 as $cle3 => $valeur3) {
                                $valeur2x .= "$cle3=\"$valeur3\" ";
                            }
                            $head .= "<$cle $valeur2x></$cle>";
                        } else {
                            $head .= "<$cle $valeur2></$cle>";
                        }
                    }
                } else {
                    $head .= "<$cle $valeur></$cle>";
                }
            }
        }

        return "<!DOCTYPE $doctype><html lang='$lang'><head><title>$title</title>$head\r\n$base\r\n{$donnee['contenu']}</head><body>";
    }

    private function phpml_var($donnee)
    {
        if ('exploit' != '' || 'exploit' != null) {
            $this->_gen_var_phpml[$donnee['exploit']] =
                ($donnee['inserts'][0] == '@' ? ${$donnee['inserts']} : $donnee['inserts']);
        }
        return ['_gen_var_phpml', $donnee['exploit'], $this->_gen_var_phpml[$donnee['exploit']]];
    }

    private function phpml_if($donnee)
    {
        preg_match_all(self::CONTENU_IF, $donnee['contenu'], $matches_contenu, PREG_SET_ORDER, 0);
        var_dump($matches_contenu);
        $_ok_return = null;

        if ($this->_element1 != '' || $this->_element1 != null) {
            echo "------->";
            // evidement possibilité de faire bien mieu
            foreach ($matches_contenu as $clee => $valeur) {
                $mnemo = $valeur[1];
                $analyse = $valeur[2];
                $contenu = $valeur[3];

                switch (true) {
                    case ($mnemo == 'done'):
                        if ($this->exploite_analyse($this->_element1)) return $contenu;
                        break;
                    case ($mnemo == 'elseif'):
                        if ($this->exploite_analyse($analyse)) return $contenu;
                        break;
                    case ($mnemo == 'else'):
                        return $contenu;
                }

            }
            echo "<-------";
        } else {
            $this->error_afficher(
                true,
                $this->_element1,
                'this->_element1',
                "erreur dans la condition if il manques des eléments phpml:if(element1)");
        }

    }

    private function exploite_analyse($element1)
    {
        preg_match(self::ANALYSE_IF, $element1, $matches_analyse1);

        var_dump($matches_analyse1);
        $recombine = array();

        $recombine[0] = is_numeric($matches_analyse1[1]) || is_bool($matches_analyse1[1]) ||
        is_null($matches_analyse1[1]) || is_int($matches_analyse1[1]) ||
        is_float($matches_analyse1[1]) ? $matches_analyse1[1] : $this->_gen_var_phpml[$matches_analyse1[1]];

        $recombine[1] = $matches_analyse1[2];

        $recombine[2] = is_numeric($matches_analyse1[3]) || is_bool($matches_analyse1[3]) ||
        is_null($matches_analyse1[3]) || is_int($matches_analyse1[3]) ||
        is_float($matches_analyse1[3]) ? $matches_analyse1[3] : $this->_gen_var_phpml[$matches_analyse1[3]];

        return $this->operator_switch($recombine);
    }

    private function operator_switch($recombine)
    {
        switch ($recombine[1]) {
            case '===':
                $retour_test = ($recombine[0] === $recombine[2]);
                break;
            case '==':
                $retour_test = ($recombine[0] == $recombine[2]);
                break;
            case '!==':
                $retour_test = ($recombine[0] !== $recombine[2]);
                break;
            case '!=':
                $retour_test = ($recombine[0] != $recombine[2]);
                break;
            case '<=':
                $retour_test = ($recombine[0] <= $recombine[2]);
                break;
            case '>=':
                $retour_test = ($recombine[0] >= $recombine[2]);
                break;
            case '>':
                $retour_test = ($recombine[0] > $recombine[2]);
                break;
            case '<':
                $retour_test = ($recombine[0] < $recombine[2]);
                break;
            case '<=>':
                $retour_test = ($recombine[0] <=> $recombine[2]);
                break;
            case '<>':
                $retour_test = ($recombine[0] <> $recombine[2]);
                break;
            case '&&':
                $retour_test = ($recombine[0] && $recombine[2]);
                break;
            case '||':
                $retour_test = ($recombine[0] || $recombine[2]);
                break;
            case '|':
                $retour_test = ($recombine[0] | $recombine[2]);
                break;
            case '%':
                $retour_test = ($recombine[0] % $recombine[2]);
                break;
        }
        return $retour_test;
    }

    private function error_afficher(bool $test, &$var, $varnom, string $message)
    {
        try {
            if ($test) {
                throw new Exception(
                    'Erreur => [ ' . $varnom . ':' . var_export($var, true) . ' ] ' . PHP_EOL .
                    $message . PHP_EOL
                );
            }
        } catch
        (Exception $e) {
            echo 'FATAL::' . $e->getMessage();
            exit;
        }
    }

    private function phpml_end($donnee)
    {
        return $donnee['contenu'] . '</body></html>';
    }
}
/\/\|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

PHPML 2.9:
https://regex101.com/r/mh8AKd/1
https://regex101.com/r/dyiyTT/1
---
https://regex101.com/r/itPaTo/1
--
https://regex101.com/r/3Co5DF/1
https://regex101.com/r/gKmN0x/1


PHPML2.8:
https://regex101.com/r/c9pEO7/1


PHPML 2.7:
version simplifier detecteur de PHPML
->https://regex101.com/r/ovRi32/1
(*UTF16)(*UCP)(?|<(?<tag>phpml)\s*(?|(?#
------------------------------------------------------------------------------
)(?:(?# FORME 1 :
data-actions:)(?:\s*(?|data-actions|actions)="(?:(?(R)\w++|[^""]*+)|(?R))*"\s*)?(?#
data-exploit:)(?:\s*(?|data-exploit|exploit)="(?:(?(R)\w++|[^""]*+)|(?R))*"\s*)?)|(?#
------------------------------------------------------------------------------
)(?:(?# FORME 2 : :foo.bar@element1#element2 | :foo.bar[test] | :foo.bar="foobar" not use $
data-actions:)(?:\s*:\w+\.\w+(?|(?:\@\w+(?:\#\w+)?)|(?:\((?:(?(R)\w++|[^()]*+)|(?R))*\)))?\s*)(?#
data-exploit:)(?:="(?:(?(R)\w++|[^""]*+)|(?R))*"\s*)?))(?#
------------------------------------------------------------------------------
data-inserts:)(?:(?|data-inserts|inserts)="(?:(?(R)\w++|[^""]*+)|(?R))*"\s*)?(?#
------------------------------------------------------------------------------
PIED >foobar</phpml>
FIN:)\s*>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/phpml>|(?#
------------------------------------------------------------------------------
FORME non PHPML reconnu:<tag> | <tag></tag>
FORME A:)(?#
FORME B:)(?:<\w*\s*[[:word:][:cntrl:][:blank:]+*-="'\/\\.,;:[\](){}\x20?#&%|@]*\s*>))


PHPML 2.6:
-> https://regex101.com/r/IIuEK0/1
amélioration du cde
(*UTF16)(*UCP)(?|<(?<tag>phpml)\s*(?|(?#
------------------------------------------------------------------------------
)(?:(?# FORME 1 :
data-actions:)(?:\s*(?|data-actions|actions)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?(?#
data-exploit:)(?:\s*(?|data-exploit|exploit)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?)|(?#
------------------------------------------------------------------------------
)(?:(?# FORME 2 : :foo.bar@element1#element2 | :foo.bar[test] | :foo.bar="foobar" not use $
data-actions:)(?:\s*:(\w+\.\w+(?|(?:\@\w+(?:\#\w+)?)|(?:\((\$?\w+.*\$?\w+)\)))?)\s*)(?#
data-exploit:)(?:="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?))(?#
------------------------------------------------------------------------------
data-inserts:)(?:(?|data-inserts|inserts)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?(?#
------------------------------------------------------------------------------
PIED >foobar</phpml>
FIN:)\s*>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/phpml>|(?#
------------------------------------------------------------------------------
FORME non PHPML reconnu:<tag> | <tag></tag>
FORME A:)(?#
FORME B:)(?:<(\w*)\s*[[:word:][:cntrl:][:blank:]+*-="'\/\\.,;:[\](){}\x20?#&%|@]*\s*>))


PHPML 2.5:
-> https://regex101.com/r/sGtcdJ/1
--
https://regex101.com/r/NdUmCD/1
(*UTF16)(*UCP)<(?|(?<tag>phpml)\s*(?|(?#
------------------------------------------------------------------------------
)(?:(?# FORME 1 :
data-actions:)(?:\s*(?|data-actions|actions)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?(?#
data-exploit:)(?:\s*(?|data-exploit|exploit)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?)|(?#
------------------------------------------------------------------------------
)(?:(?# FORME 2 : :foo.bar@element1#element2 | :foo.bar[test] | :foo.bar="foobar"
data-actions:)(?:\s*:(\w+\.\w+(?|(?:\@\w*(?:\#\w*)?)|(?:\(((?:(?(R)\w++|[^()]*+)|(?R))*)\)))?)\s*)(?#
data-exploit:)(?:="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?))(?#
------------------------------------------------------------------------------
data-inserts:)(?:(?|data-inserts|inserts)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?(?#
------------------------------------------------------------------------------
PIED >foobar</phpml>
FIN:)\s*>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/phpml>|(?#
------------------------------------------------------------------------------
FORME non PHPML reconnu:<tag> | <tag></tag>
FORME A:)(?:(?<tag>\w*)\s*([[:word:][:cntrl:][:blank:]:+*-.="'\/\\,;[\](){}\x20]*)\s*>)|(?#
FORME B:)(?:(?<tag>\w*)\s*([[:word:][:cntrl:][:blank:]:+*-.="'\/\\,;[\](){}\x20]*)\s*\/?>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/\g{tag}>))




PHPML 2.4 finalisation 1:
(*UTF16)(*UCP)<(?|(?<tag>phpml)\s*(?|(?#
partie1 data-actions/exploit)(?:(?#
actions:)(?:\s*(?|data-actions|actions)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?(?#
exploit:)(?:\s*(?|data-exploit|exploit)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?)|(?#
partie2 data-actions/exploit)(?:(?#
actions:)(?:\s*:(\w+\.\w+(?|(?:\@\w*(?:\#\w*)?)|(?:\(((?:(?(R)\w++|[^()]*+)|(?R))*)\)))?)\s*)(?#
exploit:)(?:="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?))(?#
data-inserts)(?:(?|data-inserts|inserts)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?\s*>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/phpml>|(?:(?<tag>\w*)\s*([[:word:][:cntrl:][:blank:]:+*-.="'\/\\,;[\](){}\x20]*)\s*>)|(?:(?<tag>\w*)\s*([[:word:][:cntrl:][:blank:]:+*-.="'\/\\,;[\](){}\x20]*)\s*\/?>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/\g{tag}>))
--
https://regex101.com/r/uya2LM/1




PHPML 2.3 teste :
(*UTF16)(*UCP)<(?|(phpml)\s*(?|(?#
partie1 data-actions/exploit)(?:(?|data-actions|actions)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*(?:(?|data-exploit|exploit)="((?:(?(R)\w++|[^""]*+)|(?R))*)")?\s*)|(?#
partie2 data-actions/exploit)(?::(\w*\.\w*)\s*="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*))(?#
data-inserts)(?:(?|data-inserts|inserts)="((?:(?(R)\w++|[^""]*+)|(?R))*)"\s*)?\s*>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/phpml>|(\w*)\s*([[:word:][:cntrl:][:blank:]:+*-.="'\/\\,;[\](){}\x20]*)\s*\/?>.*)


PHPML 2.2 experimental concept 3
(*UTF16)(*UCP)<(?:(phpml)|\w*)\s*([[:word:][:cntrl:][:blank:]:\-.="'\/\\,;[\](){}\x20]*)\s*\/?>.*(?:((?:(?(R)\w++|[^><]*+)|(?R))*)<\/phpml>)?
https://regex101.com/r/EQSj2S/1
phase de test 1 réussit!
syntaxe retenu :
<phpml data-actions="class.methode" data-exploite="var1,var2">contenu HTML</phpml>
ou moins conventionel au xml et HTML
<phpml:class.methode="var1,var2">contenu HTML</phpml>
Affinage et amélioration :
https://regex101.com/r/cfCOss/1
pas de forme réduite comme <phpml:class.methode="var1,var2">
il y a obligation d'une balise fermante ou
de la forme ouvrante/fermante <xyz/>
<phpml:class.methode="var1,var2" />
https://regex101.com/r/ktox7o/1
et pour le moment l'impossibilité d'utilisé des balise phpml imbriqué comme si dessous :
<phpml xyz>
<div>foo<phpml uvw..>bar</phpml></div>
</phpml>
c'est a évité bien que dans certaine condition c'est possible
il n'y aura pas d'interprétation de cette balise;
le phpml étant un asserment d'application d'un code ou d'exploitation d'un contenu.
la forme réduite sera de préférence interdite
-> forme strict retenu :
https://regex101.com/r/8bGaGD/1

<phpml data-actions="class.methode" data-exploite="test2" data-injection="" >contenu</phpml>
<phpml actions="class.methode" exploite="test2" injection="">contenu</phpml>
<phpml:class.methode="test1" injection="">contenu</phpml>
https://regex101.com/r/mftPSb/1
(*UTF16)(*UCP)<(?|(phpml)\s*([[:word:][:cntrl:][:blank:]:\+*-.="'\/\\,;[\](){}\x20]*)\s*>((?:(?(R)\w++|[^><]*+)|(?R))*)<\/phpml>|(\w*)\s*([[:word:][:cntrl:][:blank:]:\+*-.="'\/\\,;[\](){}\x20]*)\s*\/?>.*)
https://regex101.com/r/Fxfeoh/1




PHPML 2.1 experimental concep 3 https://regex101.com/r/V64JRF/1
https://regex101.com/r/V64JRF/1
<(?:(phpml)|\w*)\s*([[:word:][:cntrl:][:blank:]:\-.="'\/\\,;[\](){}\x20]*)\s*\/?>.*(?:((?:(?(R)\w++|[^><]*+)|(?R))*)<\/phpml>)?
---
<phpml data-actions="class.methode" data-exploite="qsqsqs">
<php></php>
<php>
<php>dfdfdfdfdfdfddddddddddddddd
<img src="">lklkl
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
</phpml>

<phpml data-actions="class.methode" data-exploite="">
<tag></tag>
<tag/>
<tag>
<html langue="ererererr"></html>
</phpml>


PHPML 2.0 analyse et recherche :
https://regex101.com/r/yVxnBU/1

HTML 1
PHP-ML 2.0 :
https://regex101.com/r/lnXfsH/1


PHP-ML
prototype finalisation visuel forme 1 xml compatible et forme 2 forme réduite
https://regex101.com/r/Iqw24l/1
<(?#
forme1 :)(?#
tête:)(?|phpml\s*(?#
action:)\sdata-actions="(\w+):([[[:word:]._'><!+-\/*()|]*)\"\s*(?#
data-exploit:)(?:\sdata-exploit="((?:(?(R)\w++|[^""]*+)|(?R)))\")?(?#
forme2 :)|(?#
action:)(\w+):([[[:word:]._'><!+-\/*()|]*)\s*(?#
data-exploit:)(?:="((?:(?(R)\w++|[^""]*+)|(?R)))\")?)\s*>
--- test -->

forme 1:
<phpml data-actions="alias:Math.equal(3,4)">
<phpml data-actions="bouton_droite:Modules_objets.boutton_ajustable" data-exploit="
data:'test'
">

forme 2:
<alias:Math.equal(3,4)>
<bouton_droite:Modules_objets.boutton_ajustable="
data:'test'
">
<bouton_droite:Modules_objets.boutton_ajustable>

<-- test fin ---

PHP-ML
prototype 5: https://regex101.com/r/yeoOYy/1
phase 1:
<\w+:[[[:word:]:._="'><!+-\/*]*\s*(?:\[(?:(?(R)\w++|[^[\]]*+)|(?R))\])?\s*(?:\((?:(?(R)\w++|[^()]*+)|(?R))\))?\s*(?:{(?:(?(R)\w++|[^{}]*+)|(?R))}\s*)*\s*>
phase 2:
<(\w+):([[[:word:]:._="'><!+-\/*]*)\s*(?:\[((?:(?(R)\w++|[^[\]]*+)|(?R)))\])?\s*(?:\(((?:(?(R)\w++|[^()]*+)|(?R)))\))?\s*(?:{((?:(?(R)\w++|[^{}]*+)|(?R)))}\s*)*\s*>


ave proto 4:
https://regex101.com/r/FxgscG/1
<(\w+):([[[:word:]:._="'><!+-\/*]*)\s?(?:\[((?:(?(R)\w++|[^[\]]*+)|(?R))*)\])?\s?(?:\(((?:(?(R)\w++|[^()]*+)|(?R))*)\))?\s?(?:{((?:(?(R)\w++|[^{}]*+)|(?R))*)})?>

save prototype 3 final
https://regex101.com/r/Zl6tqD/2
<(\w+):([[[:word:]:.]*)\s?(?:\[((?:(?(R)\w++|[^[\]]*+)|(?R))*)\])?\s?(?:\(((?:(?(R)\w++|[^()]*+)|(?R))*)\))?\s?(?:{((?:(?(R)\w++|[^{}]*+)|(?R))*)})?>
<alias:class.methode[in][out]{data}>


save : https://regex101.com/r/Zl6tqD/1
<(\w+):([[[:word:]:.]*)([[:word:][:cntrl:][:blank:]:\-.="'\/\\,;[\](){}\x20]*)(?:{((?:(?(R)\w++|[^{}]*+)|(?R))*)})?>

évolution de la syntax PHP-ML detection uniquement du PHP-ML
<alias:class.methode arguments {
elements exotique
}>


save nuit:
(?#
DEFINITIONS:
)(?(DEFINE)(?'head'[[:word:]]+))(?#
)(?(DEFINE)(?'arg'[[:word:][:cntrl:][:blank:]:\-.="'\/\\,;[\](){}\x20]*))(?#
)(?(DEFINE)(?'corps'>(?:[^<>]|(?R))*))(?#
)(?(DEFINE)(?'endtag'(?:<\/\g{5}\s?>|>)))(?#
ANALYSE:
)<(?:((?P>head))(?(R)\w++|[^<>]*+)|(?R))*((?P>corps))(?:<\/\g{5}\s?>)?



prototype final 5 : https://regex101.com/r/VAXBYC/1
(?#
tête: <alias:class.methode argument...
)<([0-9a-zA-Z]+)[0-9a-zA-Z:_\-.="'\/\\,;[\](){}\x0A\x20]*>(?#
corps: recuper tous entre ><
)(?:(?:[^><]|(?R))*(?#
la queueu:
)<\/\g{1}\s?>)?



prototype 4 mini detect: https://regex101.com/r/UY9FMu/1
(?#
tête: <alias
)\<([0-9a-zA-Z:\_\.]+)\s*((?:[^\<>]|(?R))*)\>(?#
corps: recuper tous entre ><
)(?:((?:[^\>\<]|(?R))*)(?#
la queueu:
)\<\/\g{1}\s?\>)?



prototype 3 little detect:
https://regex101.com/r/HKJw8L/1
(?#
tête: <alias
)\<(?:([0-9a-zA-Z:\_\.]+))((?:(?:[^\<>]|(?R))\s*)*)\>(?#
corps: recuper tous entre ><
)((?:[^\>\<]|(?R))*)(?#
la queueu:
)(?:\<\/\g{1}\s?\>)?



v15 proto 2 :
https://regex101.com/r/GhG3Rh/1
(?:(?:\<\s*(?<alias>\w+)(?:(?|\s+|\:(\w+)\.(\w+)\s*\n?)((?:(?:[^\s>]|(?R))\s*)*))?\>)(?:(?:(?:[^\>\<]|(?R))*)(?:\<\s*\/\s*(?>(\k<alias>))(?:\:(?>(\w+)\.(\w+)))?\s*\>))?)




test proto
(?:\<\s*(?<alias>\w+)(?:\s*(?:(?:[^\s>|\/>]|(?R))\s*\/?)*\s*)?\>(?:(?:(?:[^\>\<]|(?R))*)(?:\<\s*\/\s*(?>(\k<alias>))\s*\>))?)


-------
v14 phase 1
save2: https://regex101.com/r/UaU40n/1
save: https://regex101.com/r/OT1o0m/2
(?:(?:(?#
test1.A:
)(?:\<\s*(?<ml1>\w+)(?:\s*(?:(?:[^\s\>]|(?R))\s*\/?)*\s*\>)?(?:(?:(?:[^\>\<]|(?R))*)(?:\<\s*\/\s*(?>(\k<ml1>))\s*\>))?)(?#
test1.B:
))|(?:(?#
test2.A:
)(?:<(\w+)\:(\w+)\.(\w+)\s*(?:\(((?:[^\(\)]|(?R))*)\))?\s*\>(?#)((?:[^\>\<]|(?R))*)(?#)\<\s*\/\s*(?>g{1})\:?(?>\w+\.\w+)\s*>)|(?#
test2.B:
)(?:<(\w+)\:(\w+)\.(\w+)\s*(?:\(((?:[^\(\)]|(?R))*)\))?\s*\/?>)))
-----
<cccc test="" test="">
<b test="" test="" >
</cccc>
<b test="" test="" />

<php:Modules_objets.boutton_ajustable(
        texte:"",
        image:"svg/fi-rr-chart-tree.svg",
        class:"logo_boutton_ajustable",
        theme:"THEMEUSE",
        lien:"",
        injecter:"['tag' => 'img', 'injecter' => 'test_dinjection']"
        )></php>





v13 finalisation compatibilité HTML
phase 1
(?|(?:\<\s*(\w*)(?:\s*(?:(?:[^\s\>]|(?R))\s*)*\s*\>+)?\>*(?:(?:[^\>\<]|(?R))*\<\s*\/\s*(?>\g{1})\s*\>))|(?:\<\s*\w*(?:\s+(?:(?:[^\s\>]|(?R))\s*)*)?\>)|(?:<\s*(\w*)\:*\w*\.*\w*\s*(?:\((?:[^\(\)]|(?R))*\))?\s*\>(?:[^\>\<]|(?R))*\<\s*\/\s*(?>\g{1})\:?(?>\w*\.*\w*)\s*>)|(?:<\s*\w*\:?\w*\.*\w*\s*(?:\((?:[^\(\)]|(?R))*\))?\s*\/?>))
phase 2 https://regex101.com/r/YcUd4E/1
(?|(?:\<\s*(\w*)(?:\s*(?:(?:[^\s\>]|(?R))\s*)*\s*\>+)?\>*(?:((?:[^\>\<]|(?R))*)\<\s*\/\s*(?>\g{1})\s*\>))|(?:\<\s*\w*(?:\s+(?:(?:[^\s\>]|(?R))\s*)*)?\>)|(?:<\s*(\w*)(\:)*(\w*\.*\w*)\s*(?:\(((?:[^\(\)]|(?R))*)\))?\s*\>((?:[^\>\<]|(?R))*)\<\s*\/\s*(?>\g{1})\:?(?>\w*\.*\w*)\s*>)|(?:<\s*(\w*)(\:?)(\w*\.*\w*)\s*(?:\(((?:[^\(\)]|(?R))*)\))?\s*\/?>))



v12 : ajustement // https://regex101.com/r/GGoppy/3
phase 1
(?|<\s*(\w*)\:?\w*\.*\w*\s*(?:\((?:[^\(\)]|(?R))*\))?\s*\>(?:[^\>\<]|(?R))*\<\s*\/\s*(?>\g{1})\:?(?>\w*\.*\w*)\s*>|<\s*\w*\:?\w*\.*\w*\s*(?:\((?:[^\(\)]|(?R))*\))?\s*\/?>)
phase 2 : https://regex101.com/r/GGoppy/4
(?|<\s*(\w*)(\:?)(\w*\.*\w*)\s*(?:\(((?:[^\(\)]|(?R))*)\))?\s*\>((?:[^\>\<]|(?R))*)\<\s*\/\s*(?>\g{1})\:?(?>\w*\.*\w*)\s*>|<\s*(\w*)(\:?)(\w*\.*\w*)\s*(?:\(((?:[^\(\)]|(?R))*)\))?\s*\/?>)

évolution forme final v11
(?|<\s*(\w*)(:*)(\w*\.*\w*)\s*\(*((?:[^\(\)]|(?R))*)\)*\s*\>+((?:[^\>\<]|(?R))*)\<+\s*\/\s*(?>\g{1}):*(?>\w*\.*\w*)\s*>|<\s*(\w*):*(\w*\.*\w*)\s*\(*((?:[^\(\)]|(?R))*)\)*\s*\/*>)


v10 phase 1:
/(?|<\s*(\w*):*\w*\.*\w*\s*(?:\w*\=\".*\"\s*)*\s*\>+(?:[^\>\<]|(?R))*\<+\s*\/\s*(?>\g{1})\s*>|<\s*\w*:*\w*\.*\w*\s*(?:\w*\=\".*\"\s*)*\s*\/*>)/g
phase 2 :
(?|<\s*(\w*):*(\w*\.*\w*)\s*(\w*\=\".*\"\s*)*\s*\>+((?:[^\>\<]|(?R))*)\<+\s*\/\s*(?>\g{1})\s*>|<\s*(\w*):*(\w*\.*\w*)\s*(\w*\=\".*\"\s*)*\s*\/*>)

https://regex101.com/r/F7La8C/6


sav8 final :
v2:
(?|<\s*(?<tag>\w*):*(\w*\.*\w*)\s*(?<arg>(?:\w*\=\".*\"\s*)*)\s*\>+((?:[^\>\<]|(?R))*)\<+\s*\/\s*(?:\k{tag})\s*>|<\s*(\w*):*(\w*\.*\w*)\s*(?<arg>(?:\w*\=\".*\"\s*)*)\s*\/*>)

v1:
(?|<\s*(?'tag'\w*):*(\w*\.*\w*)\s*(?'arg'(?:\w*\=\".*\"\s*)*)\s*\>+((?:[^\>\<]|(?R))*)\<+\s*\/\s*(?:\k{tag})\s*>|<\s*(\w*):*(\w*\.*\w*)\s*(?'arg'(?:\w*\=\".*\"\s*)*)\s*\/*>)


sv7 final :
(?|<\s*(?'tag'\w*):*(\w*\.*\w*)\s*(?'arg'(?:\w*\=\".*\"\s*)*)\s*\>+((?:[^\>\<]|(?R))*)\<+\s*\/\s*(\k{tag})\s*>|<\s*(\w*):*(\w*\.*\w*)\s*(?'arg'(?:\w*\=\".*\"\s*)*)\s*\/*>)

sv6 prototype 1
(?|<\s*(?'first'\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;:,{}[\]()="'\s\&\?\@]*)\"*\s*\>+((?:[^\>\<]|(?R))*)\<+\s*\/\s*(\k{first})\s*>|<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;:,{}[\]()="'\s\&\?\@]*)\s*\/>)


sv5.1 FINAL:
(?|<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;:,{}[\]()="'\s\&\?\@]*)>\>*((?:[^\>\<]|(?R))*)\<*<\s*\/\s*(\w*)\s*>|<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;:,{}[\]()="'\s\&\?\@]*)\s*\/>)


SV4.2 FINAL :
(?:(?:<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;:,{}[\]()="'\s\&\?\@]*)>((?:\>*(?:(?:(?:[^\>\<]|(?R)))*)\<*))<\s*\/\s*(\w*)\s*>)|<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;:,{}[\]()="'\s\&\?\@]*)\s*\/>)
protocole:
<tag></tag>
<tag/>
<tag:objet.methode argument=""></tag>
<tag:objet.methode argument=""/>
<img src="test\test" /> (pour le moment !ne pas utilisé / et du : dans lien)
<img src="[https]\test\test" /> il y a une utilisation du \ comme remplacement

exemple
{
<php:objet.bare_chargement valeur="0;100" src="[https]\test\test.com">
<test:objet.microtime valeur="debut"/>
<b>
<div>test</div>
</b>
<b/>
<div tabindex="0"></div>
<test:objet.microtime valeur="fin"/>

<div dir="auto" class="css-901oao r-1nao33i r-37j5jr r-a023e6 r-16dba41 r-rjixqe r-bcqeeo r-bnwqim r-qvutc0" id="id__qk9nvc5e0xl" data-testid="tweetText" lang="fr"><span class="css-901oao css-16my406 r-poiln3 r-bcqeeo r-qvutc0">Un acteur de seconde zone qui fait l’ouverture d’un festival de navets organisé par des bananes !</span></div>
<img src="https:\\test\test.:@.fr" />


</php>
<php:objet.bare_chargement valeur="0;100">
<test:objet.microtime valeur="debut"/>
<b>
<div>test</div>
</b>
<test:objet.microtime valeur="fin"/>
</php>
}
---------
sv3 finl
(?:(?:<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;,{}[\]()="'\s\:\&\?]*)>((?:\>*(?:(?:(?:[^\>\<]|(?R)))*)\<*))<\s*\/\s*(\w*)\s*>)|<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;,{}[\]()="']*)\s*\/>)

sv2 final
(?:<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;,{}[\]()="']*)>((?:\>*(?:(?:(?:[^\>\<]|(?R)))*)\<*))<\s*\/\s*(\w*)\s*>|<\s*\w*\s*\/>|<\s*(\w*):*(\w*\.*\w*)\s*([0-9a-zA-Z+\\\-*_.;,{}[\]()="']*)\s*\/>)

sv1 final
<\s*\w*[:|#]\w*:*\w*[^>]*>(?:(?:\>*(?:(?:(?:[^\>\<]|(?R)))*)\<*))<\s*\/\s*\w*[:|#]*\w*:*\w*>

<\s*\w*:\w*[^>]*>(?:(?:\>*(?:(?:(?:[^\>*\<*]|(?R)))*)\<*))<\s*\/\s*\w*:\w*>

----------
<\s*i:test[^>]*>([\t*|\n*].*?[\t*|\n*])<\s*\/\s*i:test>

----
(?>(?>\<)?i)(?:(?>\:)?([0-9a-zA-Z_]+)?(?>\s*)(.*))(?:\{(?:(?:(?:[^\{\}]|(?R)))*)(?:\}(?>\>)?))
<i:head1 teste="" teste2="" {
 i:test1_{
 i:test2{test}
}
}>

i:head1{
 i:test1_{
 i:test2{test}
}
}

----
phase 1
(?>\<)(?:([0-9a-zA-Z_]*)(?>\:)?([0-9a-zA-Z_]+)?(?>\s*)(.*))(?:\>((?:.*(?:[^\>\<]|(?R))\W*.*)*)\<\/|\n\<\/|\r\n\<\/)([0-9a-zA-Z_]+)(?>\>)

(?>\<)(([a-zA-Z]*)(?>\:)([a-zA-Z]+)(?>\s*)(.*))(?:\>((?:.*(?:[^\>\<]|(?R))\W*.*)*)\<\/|\n\<\/|\r\n\<\/)([a-zA-Z]+)(?>\>)
phase 2
(?:(\w*)(?>=["|\'])([0-9a-zA-Z\/\\\[\]\(\)\{\}\`\,\;\:\.\r\n\-\@\"\']*)(?>["|\']\s*))


--------------
//(?:(?:[<]E*.*\{(?:(?:(?:[^\{\}]|(?R)))*)\})(?:>*))

(?:\{(?:(?:(?:[^\{\}]|(?R)))*)\})

test voir : (?:{([[:<:]]E\:)*\W*.*(?:[^\{\}]|(?R))*})

retenu : \{(?:[[:<:]]E\:)*\W*.*(?:[^\{\}]|(?R))*\}
retenu : \{(E:)*(\W*.*)((?:[^\{\}]|(?R))*)\}

-------------
<\w+=\w+:(?:[^(\/]|(?R))*\/>
<(\w+)=(\w+):((?:[^(\/]|(?R))*)\/>
>>>
<E=test:
        nom='1';
        tableau_de_type=[
            ['name' : 'nom', 'type' : 'texte', 'value' : 'v1', 'placeholder' : '', 'class' : 'put'],
            ['name' : 'prenom', 'type' : 'texte', 'value' : 'v2', 'placeholder' : '', 'class' : 'lut'],
        ];
        boutton_valider='ok';
        page_dappel='test';
        injection=['nom' : ['code html injecter', 'avant']];
        stylecss=['.put' : ['border':'1px solid red']];
/>

https://regex101.com/r/3ZVw23/4
>>>
        nom='1';
        tableau_de_type=[
            ['name' : 'nom', 'type' : 'texte', 'value' : 'v1', 'placeholder' : '', 'class' : 'put'],
            ['name' : 'prenom', 'type' : 'texte', 'value' : 'v2', 'placeholder' : '', 'class' : 'lut'],
        ];
        boutton_valider='ok';
        page_dappel='test';
        injection=['nom' : ['code html injecter', 'avant']];
        stylecss=['.put' : ['border':'1px solid red']];

        rettenu (\w+)=((?:[^\;$]|(?R))*)\;*


--------------------
json profil

{
  "corps": "corps.html",
  "donnees": {
    "LANGUE": "fr",
    "TITRE": "test de page",
    /*
    "ARTICLES": {
      "type": "CLASS",
      "class": "accueil",
      "methode": "article",
      "options": [
        "option1",
        "option2"
      ]*/
    }
  }
}






-----------------------
            $requette = "SELECT inscription.idsession, inscription.date_session, utilisateurs.nom, utilisateurs.mail,
                                utilisateurs.bio, utilisateurs.url, utilisateurs.entreprise
                    FROM inscription JOIN lien
                    ON inscription.id=lien.id JOIN utilisateurs
                    ON lien.idutilisateur=utilisateurs.idutilisateur
                    AND inscription.id='$this->id_utilisateur_bdd'
                    LIMIT 0,1";




                    -------------------------------------
                    <?php namespace Eukaruon;

                    use Eukaruon\configs\CMD;

                    /**
                     * @name  Euka/Eukaruon [faham]
                     * @author Manzïny/DarkSynx 2021
                     * @version alpha 0.20.02.000001
                     */
                    class Euka
                    {
                        public function index($pilote)
                        {


                            //var_dump($pilote->gestion_url());


                            /* module utilisateur */
                            $Modules_utilisateurs = $pilote->Charger_le_module(
                                module_a_charger: 'Modules_utilisateurs',
                                modules_primaire: [CMD::DONNEEUNIQUESERVEUR, CMD::MODULES_BDD]
                            );


                            /* module pages  'Page_en_cache | Modules_bdd' */
                            $Modules_pages = $pilote->Charger_le_module(
                                module_a_charger: 'Modules_pages',
                                modules_primaire: [CMD::PAGEENCACHE, CMD::MODULES_BDD]
                            );

                            $sousmodules_test = $pilote->Charger_le_module(
                                module_a_charger: 'sousmodules_test'
                            );

                            $Modules_cache = $pilote->Charger_le_module(
                                module_a_charger: 'Modules_cache'
                            );


                            $sousmodules_test->test();


                            /* gestion de l'utilisateur et de la page */
                            echo
                            $Modules_pages->afficher_la_page( // on affiche la page
                                $Modules_pages->preparer_page( // on préparer la page à afficher
                                    $Modules_utilisateurs->get_utilisateur_bdd_ok(), // on a vérifier l'ip et si l'utilisateur est en BDD
                                    $Modules_utilisateurs->get_utilisateur_page_direction() // la page à afficher
                                ));


                            $Modules_cache->cache('test:user1023456', <<<CODE
                    <?php class test {
                    function run(){
                    return 'teste_de_class';
                    }}
                    CODE
                            );

                    //test
                            // echo "Lire le fichier cache : ", $Modules_cache->cache('test:user1023456'), PHP_EOL;

                    //$Modules_cache->supprimer_cache('test:user1023456');

                    // la preparation de la page permet de savoir quel page charger
                    //if($Modules_pages->get_page_specifique());


                            /*
                             * Partie création et mise en cache
                             * ne pas surpprimer
                             *
                             */
                    //$Modules_pages->preparation_mise_encache('accueil');
                    //$page_construite = $Modules_pages->get_profile('accueil');
                    //$Modules_pages->generer('accueil.html', $page_construite);
                    //$Modules_pages->mise_en_cache('accueil.html');

                    //echo '#######################', PHP_EOL;
                    //var_dump($Modules_pages->recuperer_generer('accueil.html'));
                    //echo '-----------------------', PHP_EOL;
                    //var_dump($Modules_pages->recuperer_cache('accueil.html'));


                    //echo "-------------------------\ntest DUMP\n------------------\n";
                    //var_dump($Modules_utilisateurs->get_IDuser());
                    //var_dump(session_id());
                    //var_dump($Modules_pages->get_page_specifique());


                        }
                    }